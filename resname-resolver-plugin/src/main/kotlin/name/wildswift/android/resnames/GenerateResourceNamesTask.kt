package name.wildswift.android.resnames

import com.github.javaparser.JavaParser
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration
import com.github.javaparser.ast.body.FieldDeclaration
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.TypeName
import com.squareup.javapoet.TypeSpec
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import java.io.ByteArrayOutputStream
import java.io.OutputStreamWriter
import java.lang.reflect.Type

import javax.lang.model.element.Modifier.FINAL
import javax.lang.model.element.Modifier.PUBLIC
import javax.lang.model.element.Modifier.STATIC


/**
 * Created by swift
 */
open class GenerateResourceNamesTask : DefaultTask() {

    @TaskAction
    fun generateResNamesFile() {
        val outputPath = outputs.files.files.firstOrNull() ?: return
        inputs.files.files.forEach {
            JavaParser
                    .parse(it)
                    .types[0]
                    .childNodes
                    .filter { it is ClassOrInterfaceDeclaration }
                    .map {
                        convertToClass(it as ClassOrInterfaceDeclaration)
                    }
                    .map {
                        JavaFile.builder("name.wildswift.names", it)
                                .addFileComment("Generated by ws-android-resource-names gradle plugin. Do not modify!")
                                .build()
                    }
                    .forEach {
                        val output = ByteArrayOutputStream()
                        val outputStreamWriter = OutputStreamWriter(output)
                        it.writeTo(outputStreamWriter)
                        outputStreamWriter.flush()
                        println(String(output.toByteArray()))

                        it.writeTo(outputPath)
                    }
        }
    }

    private fun convertToClass(declaration: ClassOrInterfaceDeclaration): TypeSpec = TypeSpec
            .classBuilder(declaration.nameAsString.capitalize()+ "RNames")
            .addModifiers(PUBLIC, FINAL)
            .let { typeSpec ->
                declaration.members
                        .mapNotNull { it as? FieldDeclaration }
                        .flatMap { it.variables }
                        .map {
                            val fieldSpecBuilder = FieldSpec.builder(String::class.java, it.nameAsString)
                                    .addModifiers(PUBLIC, STATIC, FINAL)
                                    .initializer("\"${it.nameAsString}\"")
                            fieldSpecBuilder.build()
                        }
                        .forEach {
                            typeSpec.addField(it)
                        }
                typeSpec
            }
            .build()

}